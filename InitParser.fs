// Implementation file for parser generated by fsyacc
module InitParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "InitParser.fsp"

open InitTypesAST

# 10 "InitParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | IMINUS
  | IASGN
  | ILBRA
  | IRBRA
  | IVAR of (string)
  | INUM of (int)
  | COMMA
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IMINUS
    | TOKEN_IASGN
    | TOKEN_ILBRA
    | TOKEN_IRBRA
    | TOKEN_IVAR
    | TOKEN_INUM
    | TOKEN_COMMA
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_vars
    | NONTERM_lst
    | NONTERM_nums

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | IMINUS  -> 1 
  | IASGN  -> 2 
  | ILBRA  -> 3 
  | IRBRA  -> 4 
  | IVAR _ -> 5 
  | INUM _ -> 6 
  | COMMA  -> 7 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_IMINUS 
  | 2 -> TOKEN_IASGN 
  | 3 -> TOKEN_ILBRA 
  | 4 -> TOKEN_IRBRA 
  | 5 -> TOKEN_IVAR 
  | 6 -> TOKEN_INUM 
  | 7 -> TOKEN_COMMA 
  | 10 -> TOKEN_end_of_input
  | 8 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_vars 
    | 3 -> NONTERM_vars 
    | 4 -> NONTERM_vars 
    | 5 -> NONTERM_lst 
    | 6 -> NONTERM_lst 
    | 7 -> NONTERM_nums 
    | 8 -> NONTERM_nums 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 10 
let _fsyacc_tagOfErrorTerminal = 8

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | IMINUS  -> "IMINUS" 
  | IASGN  -> "IASGN" 
  | ILBRA  -> "ILBRA" 
  | IRBRA  -> "IRBRA" 
  | IVAR _ -> "IVAR" 
  | INUM _ -> "INUM" 
  | COMMA  -> "COMMA" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | IMINUS  -> (null : System.Object) 
  | IASGN  -> (null : System.Object) 
  | ILBRA  -> (null : System.Object) 
  | IRBRA  -> (null : System.Object) 
  | IVAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 5us; 4us; 2us; 65535us; 8us; 9us; 13us; 14us; 3us; 65535us; 7us; 11us; 8us; 12us; 13us; 12us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 2us; 1us; 1us; 2us; 2us; 2us; 1us; 2us; 2us; 3us; 4us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 2us; 5us; 6us; 1us; 5us; 1us; 5us; 1us; 7us; 1us; 7us; 1us; 8us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 12us; 14us; 17us; 20us; 22us; 24us; 26us; 28us; 31us; 33us; 35us; 37us; 39us; |]
let _fsyacc_action_rows = 18
let _fsyacc_actionTableElements = [|1us; 32768us; 5us; 6us; 0us; 49152us; 2us; 32768us; 0us; 3us; 7us; 5us; 0us; 16385us; 1us; 16386us; 7us; 5us; 1us; 32768us; 5us; 6us; 1us; 32768us; 2us; 7us; 3us; 32768us; 1us; 15us; 3us; 8us; 6us; 17us; 2us; 32768us; 1us; 15us; 6us; 17us; 1us; 32768us; 4us; 10us; 0us; 16387us; 0us; 16388us; 1us; 16390us; 7us; 13us; 2us; 32768us; 1us; 15us; 6us; 17us; 0us; 16389us; 1us; 32768us; 6us; 16us; 0us; 16391us; 0us; 16392us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 6us; 7us; 9us; 11us; 13us; 17us; 20us; 22us; 23us; 24us; 26us; 29us; 30us; 32us; 33us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 5us; 3us; 3us; 1us; 2us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16387us; 16388us; 65535us; 65535us; 16389us; 65535us; 16391us; 16392us; |]
let _fsyacc_reductions ()  =    [| 
# 119 "InitParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : vars)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 128 "InitParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : vars)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "InitParser.fsp"
                                                     _1 
                   )
# 32 "InitParser.fsp"
                 : vars));
# 139 "InitParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : vars)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : vars)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "InitParser.fsp"
                                                              Comma(_1,_3) 
                   )
# 46 "InitParser.fsp"
                 : vars));
# 151 "InitParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : lst)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "InitParser.fsp"
                                                              IArray(_1,_4) 
                   )
# 47 "InitParser.fsp"
                 : vars));
# 163 "InitParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : nums)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "InitParser.fsp"
                                                              IAssign(_1,_3) 
                   )
# 48 "InitParser.fsp"
                 : vars));
# 175 "InitParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : nums)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : lst)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "InitParser.fsp"
                                                           LstComma(_1,_3)
                   )
# 50 "InitParser.fsp"
                 : lst));
# 187 "InitParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : nums)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "InitParser.fsp"
                                                           LstNum(_1) 
                   )
# 51 "InitParser.fsp"
                 : lst));
# 198 "InitParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "InitParser.fsp"
                                                           UMinus(_2) 
                   )
# 53 "InitParser.fsp"
                 : nums));
# 209 "InitParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "InitParser.fsp"
                                                           INum(_1)
                   )
# 54 "InitParser.fsp"
                 : nums));
|]
# 221 "InitParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 11;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : vars =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
