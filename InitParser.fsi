// Signature file for parser generated by fsyacc
module InitParser
type token = 
  | EOF
  | IMINUS
  | IASGN
  | ILBRA
  | IRBRA
  | IVAR of (string)
  | INUM of (int)
  | COMMA
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IMINUS
    | TOKEN_IASGN
    | TOKEN_ILBRA
    | TOKEN_IRBRA
    | TOKEN_IVAR
    | TOKEN_INUM
    | TOKEN_COMMA
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_vars
    | NONTERM_lst
    | NONTERM_nums
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (vars) 
