// The generated lexer module will start with this code
{
module ProjectLexer
open FSharp.Text.Lexing
open System
// open the module that defines the tokens
open ProjectParser
// Set the language to English such that 4.0 is parsed as 4 and not 40.
System.Globalization.CultureInfo.CurrentCulture <- new System.Globalization.CultureInfo("en-US")
}

// We define macros for some regular expressions we will use later
let digit       = ['0'-'9']
let num         = digit+ ( '.' digit+)?  ('E' ('+'|'-')? digit+ )?
let letter      = ['a'-'z' 'A'-'Z'] 
let var         =  letter+ ( digit+ )?
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'

// We define now the rules for recognising and building tokens
// for each of the tokens of our language we need a rule
// NOTE: rules are applied in order top-down.
//       This is important when tokens overlap (not in this example)
rule tokenize = parse
// deal with tokens that need to be ignored (skip them)
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
// deal with tokens that need to be built
| num           { NUM(Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| "->"          { ARROW }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
// new additions
| ":="          { ASGN }
| ';'           { THEN }
| "if"          { IF }
| "fi"          { FI }
| "do"          { DO }
| "od"          { OD }
| "skip"        { SKIP }
| "[]"          { IFELSE }
| '['           { LBRA }
| ']'           { RBRA }
| "true"        { TRUE }
| "false"       { FALSE }
| var           { VAR(LexBuffer<_>.LexemeString lexbuf) }
| "&&"          { ANDD }
| '&'           { ANDS }
| "||"          { ORD }
| '|'           { ORS }
| "!="          { NOTEQ }
| '!'           { NOT }
| "<="          { LTEQ }
| ">="          { GTEQ }
| '='           { EQ }
| '<'           { LT }
| '>'           { GT }
| eof           { EOF }