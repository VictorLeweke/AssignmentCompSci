// Signature file for parser generated by fsyacc
module ProjectParser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | ASGN
  | THEN
  | IF
  | FI
  | DO
  | OD
  | SKIP
  | IFELSE
  | LBRA
  | RBRA
  | TRUE
  | FALSE
  | ANDD
  | ORD
  | ANDS
  | ORS
  | NOTEQ
  | NOT
  | LTEQ
  | GTEQ
  | EQ
  | LT
  | GT
  | ARROW
  | EOF
  | VAR of (string)
  | NUM of (float)
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_ASGN
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_SKIP
    | TOKEN_IFELSE
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_ANDD
    | TOKEN_ORD
    | TOKEN_ANDS
    | TOKEN_ORS
    | TOKEN_NOTEQ
    | TOKEN_NOT
    | TOKEN_LTEQ
    | TOKEN_GTEQ
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_ARROW
    | TOKEN_EOF
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_cmd
    | NONTERM_gc
    | NONTERM_ari
    | NONTERM_boolean
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (cmd) 
